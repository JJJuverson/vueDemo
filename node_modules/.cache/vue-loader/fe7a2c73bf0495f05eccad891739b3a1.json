{"remainingRequest":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\src\\views\\Dashboard\\components\\TodoList.vue?vue&type=style&index=0&id=68748438&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\src\\views\\Dashboard\\components\\TodoList.vue","mtime":1579599613000},{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\zfs\\Desktop\\vue\\vue3\\vue3.0-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJy4vdG9kby5zY3NzJzsK"},{"version":3,"sources":["TodoList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2LA","file":"TodoList.vue","sourceRoot":"src/views/Dashboard/components","sourcesContent":["<template>\n  <section class=\"todoapp\">\n    <header class=\"header\">\n      <input class=\"new-todo\"\n        autocomplete=\"off\"\n        placeholder=\"Type your todo list\"\n        v-model=\"newTodo\"\n        @keyup.enter=\"addTodo\">\n      <button class=\"new-todo-button\"\n        @click=\"addTodo\"  \n        v-show=\"newTodo.length > 0\"\n      ></button>\n    </header>\n    <section class=\"main\" v-show=\"todos.length\" v-cloak>\n      <div class=\"completed-wrapper\">\n        <input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\" v-model=\"allDone\">\n        <label for=\"toggle-all\">Complete all tasks</label>\n        <button class=\"clear-completed\" @click=\"removeCompleted\">\n          Clear completed\n        </button>\n      </div>\n      <ul class=\"todo-list\">\n        <li v-for=\"todo in filteredTodos\"\n          class=\"todo\"\n          :key=\"todo.id\"\n          :class=\"{ completed: todo.completed, editing: todo == editedTodo }\">\n          <div class=\"view\">\n            <input class=\"toggle\" type=\"checkbox\" v-model=\"todo.completed\">\n            <label @dblclick=\"editTodo(todo)\">{{ todo.title }}</label>\n            <button class=\"destroy\" @click=\"removeTodo(todo)\"></button>\n          </div>\n          <input class=\"edit\" type=\"text\" style=\"border: 1px solid red\"\n            v-model=\"todo.title\"\n            v-todo-focus=\"todo == editedTodo\"\n            @blur=\"doneEdit(todo)\"\n            @keyup.enter=\"doneEdit(todo)\"\n            @keyup.esc=\"cancelEdit(todo)\">\n        </li>\n      </ul>\n    </section>\n    <footer class=\"footer\" v-show=\"todos.length\" v-cloak>\n      <span class=\"todo-count\">\n        <strong>{{ remaining }}</strong> {{ remaining | pluralize }} left\n      </span>\n    </footer>\n  </section>\n</template>\n\n<script>\nconst presetValues = [{\n  \"title\":\"Wake up at 5am\",\n  \"completed\":true\n}, {\n  \"title\":\"Learn how to use Vue.js\",\n  \"completed\":false\n}]\n// Use localStorage\nconst STORAGE_KEY = \"todo-app\";\nconst todoStorage = {\n  fetch: function() {\n    var todos = JSON.parse(localStorage.getItem(STORAGE_KEY)) || presetValues;\n    todos.forEach(function(todo, index) {\n      todo.id = index;\n    });\n    todoStorage.uid = todos.length;\n    return todos;\n  },\n  save: function(todos) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(todos));\n  }\n};\n\n// visibility filters\nvar filters = {\n  all: function(todos) {\n    return todos;\n  },\n  active: function(todos) {\n    return todos.filter(function(todo) {\n      return !todo.completed;\n    });\n  },\n  completed: function(todos) {\n    return todos.filter(function(todo) {\n      return todo.completed;\n    });\n  }\n};\nexport default {\n  data() {\n    return {\n      todos: todoStorage.fetch(),\n      newTodo: \"\",\n      editedTodo: null,\n      visibility: \"all\"\n    }\n  },\n\n  watch: {\n    todos: {\n      handler: function(todos) {\n        todoStorage.save(todos);\n      },\n      deep: true\n    }\n  },\n\n  computed: {\n    filteredTodos: function() {\n      return filters[this.visibility](this.todos);\n    },\n    remaining: function() {\n      return filters.active(this.todos).length;\n    },\n    allDone: {\n      get: function() {\n        return this.remaining === 0;\n      },\n      set: function(value) {\n        this.todos.forEach(function(todo) {\n          todo.completed = value;\n        });\n      }\n    }\n  },\n\n  filters: {\n    pluralize: function(n) {\n      return n === 1 ? \"task\" : \"tasks\";\n    }\n  },\n\n  methods: {\n    addTodo: function() {\n      var value = this.newTodo && this.newTodo.trim();\n      if (!value) {\n        return;\n      }\n      this.todos.push({\n        id: todoStorage.uid++,\n        title: value,\n        completed: false\n      });\n      this.newTodo = \"\";\n    },\n\n    removeTodo: function(todo) {\n      this.todos.splice(this.todos.indexOf(todo), 1);\n    },\n\n    editTodo: function(todo) {\n      this.beforeEditCache = todo.title;\n      this.editedTodo = todo;\n    },\n\n    doneEdit: function(todo) {\n      if (!this.editedTodo) {\n        return;\n      }\n      this.editedTodo = null;\n      todo.title = todo.title.trim();\n      if (!todo.title) {\n        this.removeTodo(todo);\n      }\n    },\n\n    cancelEdit: function(todo) {\n      this.editedTodo = null;\n      todo.title = this.beforeEditCache;\n    },\n\n    removeCompleted: function() {\n      this.todos = filters.active(this.todos);\n    }\n  },\n\n  directives: {\n    \"todo-focus\": function(el, binding) {\n      if (binding.value) {\n        el.focus();\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  @import './todo.scss';\n</style>"]}]}